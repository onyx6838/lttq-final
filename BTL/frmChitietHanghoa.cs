using BUS; using Constant; using DTO; using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.IO; using System.Linq; using System.Runtime.InteropServices; using System.Text; using System.Threading.Tasks; using System.Windows.Forms;  namespace BTL {     public partial class frmChitietHanghoa : Form     {         private const int EM_SETCUEBANNER = 0x1501;         [DllImport("user32.dll", CharSet = CharSet.Auto)]         private static extern Int32 SendMessage(IntPtr hWnd, int msg, int wParam, [MarshalAs(UnmanagedType.LPWStr)] string lParam);         // local var for goods         DataTable dtCheckDupOrNone;         byte[] currentImg;         static SystemConstant sys = new SystemConstant();         public frmChitietHanghoa()         {             InitializeComponent();             frmChitietHanghoa_Load(null, null);             if (frmLogin.session.role == 2)             {                 btnThem.Enabled = btnSua.Enabled = btnXoa.Enabled = btnIn.Enabled = false;             }             Handling.FormHandling.clearBorderGroupBox(gbxChitiet);             Handling.FormHandling.clearBorderGroupBox(gbxChucnang);         }         private void loadTextBox()         {             SendMessage(txtMaVach.Handle, EM_SETCUEBANNER, 0, "Nhập Mã");             SendMessage(txtTenHangHoa.Handle, EM_SETCUEBANNER, 0, "Tên");             SendMessage(txtDonGiaNhap.Handle, EM_SETCUEBANNER, 0, "Nhập Số");             SendMessage(txtSoLuong.Handle, EM_SETCUEBANNER, 0, "Nhập Số");         }         private void frmChitietHanghoa_Load(object sender, EventArgs e)         {             DataTable nh = B_NhomHang.GetAllNhomHang();             FillCbo(nh, cbxNhomHang, "MaNhom", "TenNhom");             DataTable tl = B_TheLoai.GetAllTL();             FillCbo(tl, cbxTheLoai, "MaLoai", "TenLoai");             DataTable dv = B_DonViTinh.GetAllDVT();             FillCbo(dv, cbxDonVi, "MaDonVi", "TenDonVi");             DataTable chatLieu = B_ChatLieu.GetAllCL();             FillCbo(chatLieu, cbxChatLieu, "MaChatLieu", "TenChatLieu");             DataTable congDung = B_CongDung.GetAllCD();             FillCbo(congDung, cbxCongDung, "MaCongDung", "TenCongDung");             DataTable noiSX = B_NoiSX.GetAllNSX();             FillCbo(noiSX, cbxNoiSX, "MaNoiSX", "TenNoiSX");             dtCheckDupOrNone = B_HangHoa.GetAllHangHoa();             dgvHangHoa.DataSource = dtCheckDupOrNone;             loadTextBox();         }         private void btnCreateCode_Click(object sender, EventArgs e)
        {
            string newCode = Handling.InstanceHandling.AutoCreateKey(dtCheckDupOrNone, "MaHang", "HH");
            txtMaVach.Text = newCode;
        }         private void btnThem_Click(object sender, EventArgs e)         {             HangHoaDTO ob = standardInput();             if (ob != null)             {                 if (DuplicatedOrNone() == 1)                 {                     MessageBox.Show("Mã Hàng Hóa Trùng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                     txtMaVach.Focus();                     return;                 }                 else                 {                     B_HangHoa.saveHang(ob, sys.INSERT);                     MessageBox.Show("Thêm Thành Công", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                     dtCheckDupOrNone = B_HangHoa.GetAllHangHoa();                     dgvHangHoa.DataSource = dtCheckDupOrNone;                 }             }         }          private void btnSua_Click(object sender, EventArgs e)         {             if (DuplicatedOrNone() == 2)             {                 MessageBox.Show("Không Có Mã Đó Để Thay Đổi Liên Quan", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtMaVach.Text = "";                 return;             }             else             {                 HangHoaDTO ob = standardInput();                 if (ob != null)                 {                     B_HangHoa.saveHang(ob, sys.UPDATE);                     MessageBox.Show("Sửa Thành Công", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                     dtCheckDupOrNone = B_HangHoa.GetAllHangHoa();                     dgvHangHoa.DataSource = dtCheckDupOrNone;                 }             }         }          private void btnXoa_Click(object sender, EventArgs e)         {             if (DuplicatedOrNone() == 2)             {                 MessageBox.Show("Không Có Mã Đó Để Thay Đổi Liên Quan", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtMaVach.Text = "";                 return;             }             else             {                 B_HangHoa.DeleteHangHoa(txtMaVach.Text);                 MessageBox.Show("Xóa Thành Công", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 dgvHangHoa.DataSource = B_HangHoa.GetAllHangHoa();                 dtCheckDupOrNone = B_HangHoa.GetAllHangHoa();             }         }         private void dgvHangHoa_CellClick(object sender, DataGridViewCellEventArgs e)         {             try             {                 DataGridViewRow row = new DataGridViewRow();                 row = dgvHangHoa.Rows[e.RowIndex];                 txtMaVach.Text = row.Cells[0].Value.ToString();                 txtTenHangHoa.Text = row.Cells[1].Value.ToString();                 cbxNhomHang.SelectedValue = row.Cells[2].Value.ToString();                 txtSoLuong.Text = row.Cells[3].Value.ToString();                 txtDonGiaNhap.Text = row.Cells[4].Value.ToString();                 txtDonGiaBan.Text = row.Cells[5].Value.ToString();                 cbxTheLoai.SelectedValue = row.Cells[6].Value.ToString();                 txtNhapKhau.Text = row.Cells[7].Value.ToString();                 cbxDonVi.SelectedValue = row.Cells[8].Value.ToString();                 cbxChatLieu.SelectedValue = row.Cells[9].Value.ToString();                 cbxCongDung.SelectedValue = row.Cells[10].Value.ToString();                 cbxNoiSX.SelectedValue = row.Cells[11].Value.ToString();                 if (row.Cells[12].Value == DBNull.Value)                 {                     picAnh.Image = null;                 }                 else                 {                     byte[] b = (byte[])row.Cells[12].Value;                     currentImg = b;                     picAnh.Image = Image.FromStream(new MemoryStream(b));                 }                 txtGhiChu.Text = row.Cells[13].Value.ToString();             }             catch             {             }         }         string previousText = "";         private void txtDonGiaNhap_TextChanged(object sender, EventArgs e)         {             var currentText = txtDonGiaNhap.Text;             int i;              txtDonGiaNhap.Text =                 int.TryParse(currentText, out i)                     ? 0 > i || i > 1E+9                         ? previousText                         : i.ToString()                     : "" == currentText ? currentText : previousText;              previousText = txtDonGiaNhap.Text;             /*              */             if (txtDonGiaNhap.Text == "") txtDonGiaBan.Text = "";             else             {                 int donGiaBan = (int)(double.Parse(txtDonGiaNhap.Text) * 1.1);                 txtDonGiaBan.Text = donGiaBan.ToString();             }         }          private void btnOpen_Click(object sender, EventArgs e)         {             OpenFileDialog ofg = new OpenFileDialog();             ofg.Filter = "JPG|*.jpg;*.jpeg|BMP|*.bmp|GIF|*.gif|PNG|*.png|TIFF|*.tif;*.tiff|"             + "All Graphics Types|*.bmp;*.jpg;*.jpeg;*.png;*.tif;*.tiff";             ofg.FilterIndex = 1;             ofg.RestoreDirectory = true;             if (ofg.ShowDialog() == DialogResult.OK)             {                 picAnh.ImageLocation = ofg.FileName;                 txtImageSource.Text = ofg.FileName;             }         }
        private void btnIn_Click(object sender, EventArgs e)         {             Handling.ExcelAutomate.automateEx(dgvHangHoa, "Thông Tin Các Mặt Hàng");         }         private void dgvHangHoa_CellDoubleClick(object sender, DataGridViewCellEventArgs e)         {             if (e.RowIndex == dgvHangHoa.Rows.Count - 1)             {                 frmChitietHanghoa f1 = new frmChitietHanghoa();                 Handling.FormHandling.PreventFormMultipleTimes("Các Mặt Hàng", f1, "Chi tiết các mặt hàng");             }         }

        private void lblIntoHangHoa_Click(object sender, EventArgs e)
        {
            frmChitietHanghoa f1 = new frmChitietHanghoa();
            Handling.FormHandling.PreventFormMultipleTimes(f1, "Chi tiết các mặt hàng");
        }

        private void dgvHangHoa_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            Handling.FormHandling.changeColorRowDataGridView(dgvHangHoa);
        }
        /* in form handler*/
        public void FillCbo(DataTable t, ComboBox cbo, string ma, string ten)         {             cbo.DataSource = t;             cbo.ValueMember = ma;             cbo.DisplayMember = ten;             cbo.SelectedIndex = -1;         }         private HangHoaDTO standardInput()         {             HangHoaDTO dto = null;             int i;             /* optional*/             int dgn = 0;             string ghichu = txtGhiChu.Text.Trim();             string donGiaNhap = txtDonGiaBan.Text.Trim();             byte[] imgg = null;             /* non-optional*/             string maHang = txtMaVach.Text;             string tenHang = txtTenHangHoa.Text;             string maNhom;             string soluong = txtSoLuong.Text;             string maLoai;             string nhapKhau = txtNhapKhau.Text;             string maDonVi;             string maChatLieu;             string maCongDung;             string maNoiSX;             string z = string.Join("", txtMaVach.Text.Where(char.IsDigit));             /* clauses for optional*/             if (int.TryParse(donGiaNhap, out dgn) == true) dgn = int.Parse(txtDonGiaNhap.Text);             if (!string.IsNullOrEmpty(txtGhiChu.Text.Trim())) ghichu = "";             if (currentImg == null && txtImageSource.Text.Trim().Length == 0) imgg = null;              if (txtMaVach.Text.Trim().Length == 0)             {                 MessageBox.Show("Bạn Chưa Nhập Mã Hàng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtMaVach.Focus();                 return null;             }             else if (txtTenHangHoa.Text.Trim().Length == 0)             {                 MessageBox.Show("Bạn Chưa Nhập Tên Hàng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtTenHangHoa.Focus();                 return null;             }             else if (cbxNhomHang.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Nhóm Hàng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxNhomHang.Focus();                 return null;             }             else if (cbxTheLoai.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Thể Loại", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxNhomHang.Focus();                 return null;             }             else if (cbxDonVi.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Đơn Vị", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxDonVi.Focus();                 return null;             }             else if (cbxChatLieu.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Chất Liệu", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxChatLieu.Focus();                 return null;             }             else if (txtNhapKhau.Text.Trim().Length == 0)             {                 MessageBox.Show("Bạn Chưa Nhập Phần Nhập Khẩu", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtNhapKhau.Focus();                 return null;             }             else if (cbxCongDung.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Công Dụng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxChatLieu.Focus();                 return null;             }             else if (cbxNoiSX.SelectedIndex == -1)             {                 MessageBox.Show("Bạn Chưa Chọn Nơi SX", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 cbxNoiSX.Focus();                 return null;             }             else if (int.TryParse(txtSoLuong.Text, out i) == false)             {                 MessageBox.Show("Nhập Sai Định Dạng Số Lượng", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtSoLuong.Focus();                 return null;             }             else if (txtMaVach.Text.Contains("HH") == false)
            {
                MessageBox.Show("Nhập Theo Định Dạng Là \"HH\"", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtMaVach.Focus();                 return null;
            }             else if (z == "")
            {
                MessageBox.Show("Nhập Theo Định Dạng Là \"HH\" và Thêm Số Đằng Sau", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);                 txtMaVach.Focus();                 return null;
            }              maNhom = cbxNhomHang.SelectedValue.ToString();             maLoai = cbxTheLoai.SelectedValue.ToString();             maDonVi = cbxDonVi.SelectedValue.ToString();             maChatLieu = cbxChatLieu.SelectedValue.ToString();             maCongDung = cbxCongDung.SelectedValue.ToString();             maNoiSX = cbxNoiSX.SelectedValue.ToString();              if (txtImageSource.Text.Trim().Length != 0)             {                 dto = new HangHoaDTO(maHang, Handling.FormHandling.formatString(tenHang), maNhom, int.Parse(soluong),                 dgn, maLoai, Handling.FormHandling.formatString(nhapKhau), maDonVi, maChatLieu, maCongDung,                 maNoiSX, File.ReadAllBytes(picAnh.ImageLocation), ghichu);             }             else if (txtImageSource.Text.Trim().Length == 0 && currentImg == null)             {                 dto = new HangHoaDTO(maHang, Handling.FormHandling.formatString(tenHang), maNhom, int.Parse(soluong),                    dgn, maLoai, Handling.FormHandling.formatString(nhapKhau), maDonVi, maChatLieu, maCongDung,                    maNoiSX, imgg, ghichu);             }             else if (currentImg != null && txtImageSource.Text == "")             {                 dto = new HangHoaDTO(maHang, Handling.FormHandling.formatString(tenHang), maNhom, int.Parse(soluong),                    dgn, maLoai, Handling.FormHandling.formatString(nhapKhau), maDonVi, maChatLieu, maCongDung,                    maNoiSX, currentImg, ghichu);             }             return dto;         }         public int DuplicatedOrNone() // insert,update         {             IEnumerable<DataRow> dtrow = default;             dtrow = dtCheckDupOrNone.AsEnumerable().Where(x => x.Field<string>("MaHang") == txtMaVach.Text);             return dtrow.Count() > 0 ? 1 : 2;         }
    } } 